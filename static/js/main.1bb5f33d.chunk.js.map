{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","useState","Math","random","toString","slice","id","touched","setToched","hasError","htmlFor","classNames","type","placeholder","event","target","onBlur","NewMovie","onAdd","count","SetCount","newTitle","SetNewTitle","newDescription","SetNewDescription","newImgUrl","SetNewImgUrl","newImdbUrl","SetNewImdbUrl","newImdbId","SetNewImdbId","submitDisabled","trim","onSubmit","preventDefault","disabled","App","moviesFromServer","movieList","SetMovieList","elem","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1bb5f33d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\n\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setToched(true)}\n          required={required}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState, FormEvent } from 'react';\n\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype AddNewMovieProp = {\n  onAdd: (param: Movie) => void;\n};\n\nexport const NewMovie: React.FC<AddNewMovieProp> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, SetCount] = useState(0);\n  const [newTitle, SetNewTitle] = useState('');\n  const [newDescription, SetNewDescription] = useState('');\n  const [newImgUrl, SetNewImgUrl] = useState('');\n  const [newImdbUrl, SetNewImdbUrl] = useState('');\n  const [newImdbId, SetNewImdbId] = useState('');\n\n  const resetForm = () => {\n    SetNewTitle('');\n    SetNewDescription('');\n    SetNewImgUrl('');\n    SetNewImdbUrl('');\n    SetNewImdbId('');\n  };\n\n  const submitDisabled = !newTitle.trim()\n  || !newDescription.trim()\n  || !newImgUrl.trim()\n  || !newImdbUrl.trim()\n  || !newImdbId.trim();\n\n  const submitMovie = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    SetCount(count + 1);\n\n    const newMovie = {\n      title: newTitle,\n      description: newDescription,\n      imdbUrl: newImdbUrl,\n      imgUrl: newImgUrl,\n      imdbId: newImdbId,\n    };\n\n    onAdd(newMovie);\n    resetForm();\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count} onSubmit={submitMovie}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newTitle}\n        onChange={(event) => SetNewTitle(event)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        required\n        value={newDescription}\n        onChange={(event) => SetNewDescription(event)}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        required\n        value={newImgUrl}\n        onChange={(event) => SetNewImgUrl(event)}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        required\n        value={newImdbUrl}\n        onChange={(event) => SetNewImdbUrl(event)}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        required\n        value={newImdbId}\n        onChange={(event) => SetNewImdbId(event)}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={submitDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movieList, SetMovieList] = useState(moviesFromServer);\n\n  const addNewMovie = (elem: Movie) => {\n    SetMovieList([...movieList, elem]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList\n          movies={movieList}\n        />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addNewMovie} /* onAdd={(movie) => {}} */ />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}